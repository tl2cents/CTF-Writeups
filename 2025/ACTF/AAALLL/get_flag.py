from Crypto.Cipher import AES
from hashlib import md5

p = 3774877201

sol = (1, -1, 0, 1, 1, 1, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, 1, 1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 1, 1, 0, 0, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, -1, -1, 1, 0, -1, 1, 0, -1, 0, 1, 1, -1, 0, -1, 0, 1, -1, 0, -1, 1, -1, -1, 0, -1, -1, 0, -1, 1, -1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, -1, -1, 1, 0, -1, -1, -1, -1, -1, 0, 1, 1, 0, -1, 0, 0, 1, 1, -1, 0, 0, -1, -1, 1, -1, 0, 0, 0, 0, 1, -1, 0, 0, 1, 1, -1, -1, -1, -1, 1, 1, 0, 1, -1, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, -1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, 1, -1, 1, 0, 1, 0, -1, 1, 0, -1, 1, -1, 0, -1, 1, 0, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 0, 0, -1, 1, 1, 0, -1, 0, 1, 0, -1, -1, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, 0, 0, -1, -1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1, 0, 0, -1, 0, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 0, -1, 0, 0, 1, -1, -1, -1, 0, -1, 0, -1, 0, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 0, -1, -1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, -1, 0, 0, 1, 0, 1, 1, 1, -1, 1, -1, 1, 0, 1, 1, -1, 1, 1, 1, 0, -1, 0, 0, 0, -1, 0, 1, 1, 0, 1, 1, 0, 1, 0, -1, 1, 1, -1, 0, 0, -1, -1, 0, 0, -1, 1, -1, 0, 1, 1, 1, 1, 0, -1, 1, 1, 1, 0, -1, 1, -1, 1, 1, 0, -1, 0, 0, 1, 1, 1, 0, -1, 1, 1, 1, -1, 0, 0, 1, -1, -1, 0, 0, 1, 1, 1, 1, 1, -1, -1, 0, -1, 0, 1, 0, -1, -1, -1, -1, 1, 0, 1, 1, -1, 0, 0, -1, -1, 1, 0, 1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, 1)
assert len(sol) == 450

sol1 = [num % p for num in sol]
sol2 = [-num % p for num in sol]

key = md5(str(list(sol2)).encode()).digest()
aes = AES.new(key = key, mode = AES.MODE_ECB)
ct = b'"\xf2Y\xf0\x15\xc5x\x94\xb9E\xbd\xd3\xa7\xb1\xad\x00\xa2D*+\x87BQ_20\x87\xa2\nP\xfc\xce\x0eW\xaf\xd8-.\xb5\xfai\xf1\xf6*\xben^\xd5'
print(aes.decrypt(ct))