from sage.all import prod, matrix, GF, factor, lcm
from collections import namedtuple


class Point(namedtuple("Point", "x y")):
    __slots__ = () 
    def is_zero(self):
        return self.x == 0 and self.y == 1

O = Point(0, 1)

def point_addition(P, Q, n):
	if P == O:
		return Q
	if Q == O:
		return P
	x = (P.x * Q.y + P.y * Q.x - P.x * Q.x) % n
	y = (P.x * Q.x + P.y * Q.y) % n
	return Point(x, y)
	
def double_and_add(k, P, n):
	Q = P
	R = O
	while(k > 0):
		if k & 1:
			R = point_addition(R, Q, n)
		k >>= 1
		Q = point_addition(Q, Q, n)
	return R


n = 0x231d5fa471913e79facfd95e9b874e2d499def420e0914fab5c9f87e71c2418d1194066bd8376aa8f02ef35c1926f73a46477cd4a88beae89ba575bb3e1b04271426c6706356dd8cd9aa742d7ad0343f8939bfd2110d45122929d29dc022da26551e1ed7000
G1 = Point(0xf22b9343408c5857048a19150c8fb9fd44c25d7f6decabc10bf46a2250a128f0df15adc7b82c70c0acaf855c0e898b141c9c94ba8aef8b67ea298c6d9fd870ea70e1c4f8a1b595d15373dc6db25a4ecddf626a64f47beba5538b7f733e4aa0c4f1fd4c291d, 0x8d3264514b7fdbce97fbaedb33120c7889a1af59691a1947c2c7061347c091b0950ca36efaa704514004a988b9b87b24f5cebf2d1c7bef44ff172519e1a62eb62cde234c94bd0ab39375d7ddb42e044090c8db46d3f965ef7e4753bc41dac3b8b3ae0cdb57)
ps = [2**12, 5**4, 15271784978279, 10714146599832792643, 222696442740376752383**3, 899889935029682511225429150065010811552017719005924136271659166808024139,899889935029682511225429150065010811552017719005924136271659168643090431]
assert prod(ps) == n

# p = 5 # special case with order = 20
p = 15271784978279
p = 10714146599832792643
p = 222696442740376752383
p = 899889935029682511225429150065010811552017719005924136271659168643090431
assert n % p == 0

gen = Point(G1.x % p, G1.y % p)
order_cads = [p - 1, p, p + 1,  p + 2, p**2 - 1, p**2, p**2 + 1, p**2 + 2]
order_cases = ["p - 1", "p", "p + 1", "p + 2", "p^2 - 1", "p^2", "p^2 + 1", "p^2 + 2"]
for i, order in enumerate(order_cads):
    if double_and_add(order, gen, p) == O:
        print(f"Case {order_cases[i]}, Order: {factor(order)}")
        break

# os = [None, 5**3 * 20, 15271784978278, 114792937362708591729034885900234925448, 49593705609217901538575978041198096178688, 899889935029682511225429150065010811552017719005924136271659166808024138, 899889935029682511225429150065010811552017719005924136271659168643090430]
# os = [None, None, None, 114792937362708591729034885900234925448, 49593705609217901538575978041198096178688, None, 899889935029682511225429150065010811552017719005924136271659168643090430]
# full_o = lcm([5**3 * 20, 15271784978278, 114792937362708591729034885900234925448, 49593705609217901538575978041198096178688, 899889935029682511225429150065010811552017719005924136271659168643090430])
# print(f"Full order: {full_o} {full_o.bit_length()} bits")