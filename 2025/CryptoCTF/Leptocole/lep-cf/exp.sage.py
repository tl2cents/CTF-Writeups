

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_127 = Integer(127); _sage_const_26 = Integer(26); _sage_const_14 = Integer(14); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1)
from pwn import remote
from re import findall  
# from sage.all import *

q = _sage_const_127 
k,n = _sage_const_26 ,_sage_const_14 
io = remote("91.107.133.165", "37373")
io.recvuntil(b'uit\n')
io.sendline(b'g')
io.recvuntil(b'G = ')
Glist = io.recvuntil(b'\nH')[:-_sage_const_2 ].decode()

io.recvuntil(b'= ')
Hlist = io.recvuntil('\nâ”ƒ'.encode())[:-_sage_const_4 ].decode()  
def parse_matrix(s):
    rows = s.split('\n')
    matrix = []
    for row in rows:
        if row.strip():
            matrix.append([int(x) for x in findall(r'\d+', row)])
    return matrix

F = GF(q)
G = matrix(F, parse_matrix(Glist))
H = matrix(F, parse_matrix(Hlist)) 

load("utils.sage")
load("lep_solver.sage")

q = _sage_const_127 
n = _sage_const_26 
k = _sage_const_14 

Fq = GF(q)

# G1 = random_matrix(Fq, k, n)
# Q = randomMonomial(n, q)
# G2 = (G1*Q).echelon_form()

result = lepCollSearch(G, H)
if result != None:
    U, P = result
    # assert G2 == U*G1*P
    assert H == U*G*P
    print("lepCollSearch succesfully recovered solution.")


_U,_P = result
print(_U*G*_P==H) 
print(_U.dimensions())
print(_P.dimensions())
io.recvuntil(b"uit\n")
io.sendline(b"s")
io.recvuntil(b"Please send the matrix U row by row: ")
print(_U.dimensions())
print(_P)
for i in range(_sage_const_14 ):
    print(str(list(_U[i]))[_sage_const_1 :-_sage_const_1 ])
    io.sendline(str(list(_U[i]))[_sage_const_1 :-_sage_const_1 ].encode())
io.recvuntil(b"Now, please send the matrix P row by row: ")
for _ in range(n):
    print(str(list(_P[_]))[_sage_const_1 :-_sage_const_1 ])
    io.sendline(str(list(_P[_]))[_sage_const_1 :-_sage_const_1 ].encode())
io.interactive()

