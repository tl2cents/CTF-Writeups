
import ctypes
from ctypes import c_void_p, c_ulong
import os
from sage.all import matrix, GF, vector
import random

mix0 = [
    0x98, 0xE8, 0x6C, 0xF4, 0x91, 0xA7, 0xEE, 0x7B, 0xF5, 0x21, 0x63, 0x5C, 0x2C, 0x2F, 0x7C, 0xC8,
    0x8A, 0x9F, 0x40, 0xE4, 0x60, 0xBD, 0x9B, 0xB6, 0xD6, 0x6E, 0x03, 0xE0, 0xA5, 0xAB, 0xBB, 0xA2,
    0x70, 0xC9, 0x4A, 0x9D, 0x59, 0xF3, 0x65, 0x3E, 0x15, 0x0A, 0x0C, 0xDA, 0x06, 0xC3, 0x2B, 0x2E,
    0xAF, 0x0F, 0x77, 0x31, 0xD3, 0x61, 0xA4, 0x19, 0x92, 0xF0, 0x68, 0x49, 0x11, 0xE1, 0x78, 0xFE,
    0xAA, 0x08, 0x4B, 0x53, 0xC5, 0xF9, 0x79, 0xFC, 0x86, 0x55, 0x2A, 0xD8, 0x67, 0x5D, 0x50, 0x33,
    0x72, 0x7E, 0xCA, 0xCD, 0x38, 0xA1, 0x2D, 0x25, 0x39, 0xB5, 0xCB, 0x27, 0xD4, 0x75, 0xCC, 0x89,
    0x7A, 0x3D, 0x48, 0x32, 0x20, 0xA8, 0x0E, 0xCE, 0x52, 0xB7, 0x74, 0x1F, 0xC2, 0x82, 0x10, 0x35,
    0x95, 0xEC, 0x7F, 0x41, 0xDC, 0x51, 0xE7, 0x99, 0x3B, 0x14, 0x3A, 0x42, 0xB0, 0xDE, 0xFD, 0xEB,
    0x24, 0xC6, 0xE2, 0x4D, 0x64, 0x05, 0x8B, 0xC1, 0xBE, 0xFF, 0x01, 0x9E, 0xA0, 0x28, 0xEF, 0x5F,
    0x29, 0x56, 0x6A, 0x71, 0x88, 0x7D, 0xD9, 0x94, 0x1E, 0xEA, 0x1A, 0x76, 0xB3, 0x30, 0x5B, 0x5A,
    0xAC, 0x04, 0xB8, 0x9C, 0x8F, 0xBF, 0xFB, 0x80, 0x66, 0xD1, 0x46, 0xDD, 0x96, 0x85, 0x02, 0x09,
    0xC7, 0xF6, 0x37, 0xDF, 0xD0, 0x34, 0x62, 0x0D, 0xE5, 0x0B, 0xC0, 0xC4, 0xE6, 0x3C, 0x26, 0xA6,
    0xB2, 0x45, 0x57, 0x07, 0xE9, 0xD2, 0xAE, 0xA3, 0x36, 0xB9, 0x17, 0x81, 0x5E, 0xB4, 0x18, 0x12,
    0xFA, 0x4F, 0x6D, 0x47, 0xD7, 0xD5, 0x1B, 0x90, 0x8E, 0xDB, 0x13, 0xED, 0x3F, 0x84, 0x43, 0x87,
    0x73, 0x22, 0xA9, 0x00, 0x69, 0x6F, 0x8D, 0x1D, 0xF2, 0xB1, 0xBA, 0x4C, 0x8C, 0x4E, 0x1C, 0x54,
    0x6B, 0x58, 0xF8, 0xF7, 0xAD, 0x23, 0xE3, 0xBC, 0x16, 0x44, 0x97, 0xF1, 0x93, 0x9A, 0x83, 0xCF,
]
mix1 = [
    0xC2, 0x53, 0x18, 0x89, 0x5E, 0xCF, 0x84, 0x15, 0x76, 0xE7, 0xAC, 0x3D, 0xEA, 0x7B, 0x30, 0xA1,
    0x13, 0x82, 0xC9, 0x58, 0x8F, 0x1E, 0x55, 0xC4, 0xA7, 0x36, 0x7D, 0xEC, 0x3B, 0xAA, 0xE1, 0x70,
    0xFF, 0x6E, 0x25, 0xB4, 0x63, 0xF2, 0xB9, 0x28, 0x4B, 0xDA, 0x91, 0x00, 0xD7, 0x46, 0x0D, 0x9C,
    0x2E, 0xBF, 0xF4, 0x65, 0xB2, 0x23, 0x68, 0xF9, 0x9A, 0x0B, 0x40, 0xD1, 0x06, 0x97, 0xDC, 0x4D,
    0xBC, 0x2D, 0x66, 0xF7, 0x20, 0xB1, 0xFA, 0x6B, 0x08, 0x99, 0xD2, 0x43, 0x94, 0x05, 0x4E, 0xDF,
    0x6D, 0xFC, 0xB7, 0x26, 0xF1, 0x60, 0x2B, 0xBA, 0xD9, 0x48, 0x03, 0x92, 0x45, 0xD4, 0x9F, 0x0E,
    0x81, 0x10, 0x5B, 0xCA, 0x1D, 0x8C, 0xC7, 0x56, 0x35, 0xA4, 0xEF, 0x7E, 0xA9, 0x38, 0x73, 0xE2,
    0x50, 0xC1, 0x8A, 0x1B, 0xCC, 0x5D, 0x16, 0x87, 0xE4, 0x75, 0x3E, 0xAF, 0x78, 0xE9, 0xA2, 0x33,
    0x04, 0x95, 0xDE, 0x4F, 0x98, 0x09, 0x42, 0xD3, 0xB0, 0x21, 0x6A, 0xFB, 0x2C, 0xBD, 0xF6, 0x67,
    0xD5, 0x44, 0x0F, 0x9E, 0x49, 0xD8, 0x93, 0x02, 0x61, 0xF0, 0xBB, 0x2A, 0xFD, 0x6C, 0x27, 0xB6,
    0x39, 0xA8, 0xE3, 0x72, 0xA5, 0x34, 0x7F, 0xEE, 0x8D, 0x1C, 0x57, 0xC6, 0x11, 0x80, 0xCB, 0x5A,
    0xE8, 0x79, 0x32, 0xA3, 0x74, 0xE5, 0xAE, 0x3F, 0x5C, 0xCD, 0x86, 0x17, 0xC0, 0x51, 0x1A, 0x8B,
    0x7A, 0xEB, 0xA0, 0x31, 0xE6, 0x77, 0x3C, 0xAD, 0xCE, 0x5F, 0x14, 0x85, 0x52, 0xC3, 0x88, 0x19,
    0xAB, 0x3A, 0x71, 0xE0, 0x37, 0xA6, 0xED, 0x7C, 0x1F, 0x8E, 0xC5, 0x54, 0x83, 0x12, 0x59, 0xC8,
    0x47, 0xD6, 0x9D, 0x0C, 0xDB, 0x4A, 0x01, 0x90, 0xF3, 0x62, 0x29, 0xB8, 0x6F, 0xFE, 0xB5, 0x24,
    0x96, 0x07, 0x4C, 0xDD, 0x0A, 0x9B, 0xD0, 0x41, 0x22, 0xB3, 0xF8, 0x69, 0xBE, 0x2F, 0x64, 0xF5,
]
mix2 = [
    0xEE, 0x38, 0x9C, 0x0C, 0x49, 0x76, 0x3C, 0x93, 0x95, 0x19, 0x27, 0xC4, 0x17, 0xA5, 0xBC, 0xF5,
    0xCF, 0x46, 0xFD, 0x77, 0xFB, 0x51, 0x29, 0x85, 0x5E, 0x66, 0x2B, 0x7B, 0xF1, 0x39, 0x65, 0x60,
    0xE7, 0xC1, 0x5F, 0xD8, 0x9E, 0xBB, 0xF9, 0xE9, 0x2D, 0x83, 0xA9, 0x53, 0xCD, 0x45, 0x50, 0x04,
    0x23, 0xD2, 0x37, 0x4A, 0xC0, 0x6E, 0x42, 0xBD, 0xB1, 0x22, 0x52, 0x24, 0xD4, 0x63, 0xC9, 0xDB,
    0x8A, 0x31, 0x01, 0x1A, 0x70, 0x1C, 0x05, 0x72, 0x8C, 0xD6, 0x0A, 0x3A, 0x33, 0xEF, 0xB5, 0x8D,
    0xE0, 0x55, 0x78, 0x8E, 0x09, 0xA0, 0x2F, 0x75, 0xB8, 0xD9, 0x88, 0xAA, 0x14, 0x86, 0x69, 0xC5,
    0xDC, 0x4B, 0xEB, 0x07, 0x84, 0xAC, 0x54, 0x26, 0xEC, 0x28, 0x90, 0x56, 0x03, 0x9D, 0xD7, 0xF0,
    0x97, 0x0B, 0xB3, 0xD3, 0x80, 0x81, 0xB0, 0xC6, 0x59, 0x4E, 0x91, 0xBE, 0x36, 0xB9, 0xFC, 0xB7,
    0x10, 0x2E, 0x3D, 0x87, 0xE5, 0x6D, 0x96, 0x16, 0x00, 0x02, 0x99, 0x73, 0x06, 0xDA, 0x4F, 0x32,
    0x4C, 0xC3, 0x3B, 0x2A, 0x94, 0x48, 0x25, 0x62, 0x2C, 0x8B, 0x98, 0xB2, 0xE6, 0xE2, 0x5A, 0x71,
    0xB6, 0xEA, 0x08, 0x0D, 0xA7, 0x89, 0x7A, 0xF7, 0xDF, 0x1E, 0xE3, 0x43, 0x7C, 0x3F, 0x35, 0x1D,
    0xCC, 0xAE, 0x1B, 0x82, 0xE8, 0x6F, 0xD0, 0xC8, 0xB4, 0x92, 0x3E, 0x34, 0xED, 0xD1, 0x67, 0x0E,
    0xC7, 0x30, 0x41, 0xF4, 0xDD, 0x5C, 0x4D, 0x20, 0x58, 0x12, 0xF8, 0x15, 0xA1, 0x61, 0xD5, 0xF3,
    0xC2, 0xA4, 0x79, 0x40, 0x21, 0xE4, 0x6B, 0xAB, 0xA3, 0xA6, 0x6A, 0xF2, 0x7E, 0x47, 0x7F, 0x5B,
    0x74, 0x9F, 0x7D, 0x68, 0x18, 0xBF, 0x8F, 0xAD, 0x13, 0xCB, 0xBA, 0xA8, 0x6C, 0x64, 0xA2, 0xCA,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    # ?
]
mix3 = [
    0x7D, 0x32, 0x09, 0x23, 0x56, 0x36, 0x2E, 0x3D, 0x05, 0x0C, 0x7E, 0x49, 0x5C, 0x4D, 0x47, 0x45,
    0x43, 0x10, 0x1E, 0x1B, 0x5F, 0x16, 0x22, 0x02, 0x66, 0x79, 0x13, 0x5B, 0x78, 0x4C, 0x7A, 0x57,
    0x20, 0x5A, 0x0A, 0x4F, 0x3B, 0x33, 0x30, 0x12, 0x53, 0x08, 0x60, 0x35, 0x41, 0x17, 0x24, 0x3E,
    0x46, 0x1F, 0x76, 0x5E, 0x71, 0x29, 0x48, 0x3A, 0x4E, 0x6D, 0x2C, 0x4A, 0x7C, 0x52, 0x2D, 0x38,
    0x1D, 0x0E, 0x67, 0x2F, 0x61, 0x11, 0x34, 0x27, 0x44, 0x1A, 0x6A, 0x31, 0x2A, 0x3F, 0x28, 0x75,
    0x0F, 0x77, 0x4B, 0x14, 0x63, 0x6E, 0x69, 0x25, 0x3C, 0x64, 0x18, 0x21, 0x70, 0x58, 0x04, 0x50,
    0x6B, 0x65, 0x5D, 0x0D, 0x74, 0x26, 0x07, 0x00, 0x62, 0x0B, 0x01, 0x7B, 0x55, 0x6F, 0x39, 0x7F,
    0x40, 0x51, 0x59, 0x73, 0x68, 0x19, 0x2B, 0x6C, 0x54, 0x42, 0x03, 0x06, 0x15, 0x1C, 0x72, 0x37,
]


lib = ctypes.CDLL('./bin/libhash.so')
lib.hash_compute.argtypes = [c_void_p, c_void_p, c_ulong]
lib.hash_compute.restype = c_void_p

def hash_compute_c(buf1: bytes, buf2: bytes) -> bytes:
    buf1_ptr = ctypes.create_string_buffer(buf1)
    buf2_ptr = ctypes.create_string_buffer(buf2)
    buf2_len = len(buf2)
    result_ptr = lib.hash_compute(buf1_ptr, buf2_ptr, buf2_len)
    result = bytes(ctypes.cast(result_ptr, ctypes.POINTER(ctypes.c_byte * 16)).contents)
    return result

def hash_round(res, payload, salt):
    """
    Note that mix1 is actually linear sbox. The step of res[j] ^= mix0[...] is not linear. 
    However, we can just treat the this step as a lookup operation, i.e., T[i, j, payload[j]].
    Let the left affine transformation be: f(x) = Ax + b over F2. The whole hash is 'affine' as follows:
        Change the single byte in index j1 of payload to a1 will independently change the output by delta_j1.
        Change the single byte in index j2 of payload to a2 will independently change the output by delta_j2.
        Change the bytes in index j1 and j2 of payload to (a1, a2) will change the output by xor(delta_j1, delta_j2).
    This affine property easily extends to multiple blocks and allows us to solve linear equations over F2 
    to find the preimage of any hash value as long as len(payload) >= 128.
    """
    res = bytearray(res[:])
    v7 = bytearray(16)
    for i in range(15):
        for j in range(16):
            res[j] ^= mix0[payload[j] ^ salt[mix2[j | (16 * i)] >> 4] ^ salt[mix2[j | (16 * i)] & 0xF]]
            v7[j] = mix1[res[j]]
            res[j] = 0
        for k in range(128):
            res[k >> 3] ^= (((v7[mix3[k] >> 3] >> (mix3[k] & 7)) & 1) << (k & 7))
    return res

# the padding stuff might be different in C
# this just for testing purposes
def hash_compute_py(salt, payload):
    n = 16 - len(payload) % 16
    payload += bytes([n]) * n
    res = salt[:]
    for i in range(0, len(payload), 16):
        res = hash_round(res, payload[i: i + 16], salt)
    return bytes(res)

def xor(a, b):
    assert len(a) == len(b), "XOR operands must be of the same length"
    return bytes([i ^ j for i, j in zip(a, b)])

def bytes_to_bits(data: bytes):
    bits = []
    for byte in data:
        bits.extend([int(bit) for bit in bin(byte)[2:].zfill(8)])
    return bits

def preimage_attack(target_hash, mid_payload_length = 128, salt = b"\x00" * 16, prefix = b"", suffix = b"", hash_func = hash_compute_c):
    assert mid_payload_length >= 128, "mid_payload_length must be at least 128"
    custom_hash =  lambda mid_payload: hash_func(salt, prefix + mid_payload + suffix)
    payload_base_0 = os.urandom(mid_payload_length)
    base_hash = custom_hash(payload_base_0)
    while True:
        # sample payload that only differs in one byte
        payload_base_1 = []
        delta_hashes = []
        for i in range(mid_payload_length):
            sample = bytearray(payload_base_0)
            sample[i] = random.randint(1, 255) ^ payload_base_0[i] # different byte
            payload_base_1.append(sample[i])
            delta_hashes.append(bytes_to_bits(xor(custom_hash(bytes(sample)), base_hash)))
        Amat = matrix(GF(2), delta_hashes).T
        b_vec = vector(GF(2), bytes_to_bits(base_hash))
        # solve: target_hash = A * x + b
        target_vec = vector(GF(2), bytes_to_bits(target_hash))
        try:
            sol_idxs = Amat.solve_right(b_vec + target_vec)
        except:
            continue
        payload_pairs = [payload_base_0, payload_base_1]
        sol = bytes([payload_pairs[val][i] for i, val in enumerate(sol_idxs)])
        # check if the solution is valid
        assert custom_hash(sol) == target_hash, "Solution does not match target hash"
        return sol

def test_preimage_attack(hashfunc = hash_compute_py):
    salt = os.urandom(16)
    target_hash = bytes([0x00] * 16)
    salt = os.urandom(16)
    sol = preimage_attack(target_hash, 128, salt, b'tl2cents', b'\x08' * 8, hashfunc)
    print("solved:", sol.hex())
    assert hashfunc(salt, b'tl2cents' + sol + b'\x08' * 8) == target_hash

def test_linearity_of_hash(hashfunc = hash_compute_py, repeated_times = 128):
    base = os.urandom(128)
    salt = os.urandom(16)
    h0 = hashfunc(salt, base)
    sample_diff_val = lambda i: random.randint(1, 255)^base[i]

    for _ in range(repeated_times):
        idx1, idx2 = random.sample(range(128), 2)
        new_val1 = sample_diff_val(idx1)
        new_val2 = sample_diff_val(idx2)
        new_inp1 = bytearray(base)
        new_inp1[idx1] = new_val1 # new_inp1 differs from base at idx1
        h1 = hashfunc(salt, bytes(new_inp1))
        delta1 = xor(h1, h0)
        new_inp2 = bytearray(base)
        new_inp2[idx2] = new_val2 # new_inp2 differs from base at idx2
        h2 = hashfunc(salt, bytes(new_inp2))
        delta2 = xor(h2, h0)
        new_inp12 = bytearray(base) # new_inp12 differs from base at idx1 and idx2
        new_inp12[idx1] = new_val1
        new_inp12[idx2] = new_val2
        h12 = hashfunc(salt, bytes(new_inp12))
        delta12 = xor(h12, h0)
        assert delta12 == xor(delta1, delta2), "Hash function is not linear"
    print("Hash function is linear")
        

if __name__ == "__main__":
    # Test linearity
    test_linearity_of_hash(hash_compute_py)
    test_linearity_of_hash(hash_compute_c)
    # Test the preimage attack
    test_preimage_attack(hash_compute_py)
    test_preimage_attack(hash_compute_c)


