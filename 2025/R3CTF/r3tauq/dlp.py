from sage.all import QuaternionAlgebra, Zmod, matrix, vector, ZZ, is_prime, PolynomialRing, GF, discrete_log, crt, Integer, lcm
from sage.modules.free_module_integer import IntegerLattice
from math import gcd
from sage.all import var
import random

data = [9179146701312781699176828536776206089522408831979885137804817119605132824670673896777591947510882312771183820299882701673215709151977703193903616420702637,
        188706257709485662889897107268939642280152413424908152855562194130538159229344166143895172825675717408926036013540426973122050052311570664470631060866326,
        2682712522093551545327045002884555242296600010649692520986985330242254238488174707977608269114146421801908861117953931511928486194314901772151783668459458,
        3450486865638869884029607240891787866556930082379406388731244160308196118526545881858756124529382085993846169512275853780392762817972043910244447967967496,
        3978613946907291563196945341686358146709099241100401211979238259502207240204268447607153317575767659025152104242438128290935255838611081957683034411586841,
        'fb459084099c44b75f2a1c256b604b187ab4877e78ea2b9fc5320471c319f9063428c72002310df82e1a424425189d0dabebe601031a']

n = data[0]
quater_elem = data[1:5]
ciphertext = data[5]

r = 74894385846710556044104011882125496960046611255536111648508533082603964330861
p = 91109511933071554201802903795701989021612569628964539259899050592358431892241
q = 100748500420633602436909572573651942923829948109715215298913760623104145908957
x = 26111235826389281409921206631160868195531041229246816708189517548794591270391590598506678037519453384408563443564544
y = 24759073387322890531475974179418283533319728990974857112961421713284938654520449858486190319612120977056990626840576

qr_p = QuaternionAlgebra(GF(p), -x, -y)
qr_q = QuaternionAlgebra(GF(q), -x, -y)
order_p = qr_p.order()
order_q = qr_q.order()
g = [x+y, p + x, q + y, r]
g_p = qr_p(g)
g_q = qr_q(g)
# gp_order = g_p.order()
# gq_order = g_q.order()
units = [1, x, y, x*y]

quater_abs = lambda a: sum(int(ai)**2 * ui for ai, ui in zip(a, units))
print(f"Order of gp in p: {order_p == p**4}")
print(f"Order of gq in q: {order_q == q**4}")
abs_gp = quater_abs(g_p) % p
abs_gq = quater_abs(g_q) % q
e = random.randint(1, p-1)
yp = g_p**e
yq = g_q**e
abs_yp = quater_abs(yp)
abs_yq = quater_abs(yq)
print(f"Check power in gp {pow(abs_gp, e, p) == abs_yp % p}")
print(f"Check power in gq {pow(abs_gq, e, q) == abs_yq % q}")

# our dlogs 
abs_yp = quater_abs(quater_elem) % p
abs_yq = quater_abs(quater_elem) % q
print(f"Dlog in Fp with {p = }")
print(f"y = {abs_yp}")
print(f"g = {abs_gp}")

print(f"Dlog in Fq with {q = }")
print(f"y = {abs_yq}")
print(f"g = {abs_gq}")

""" 
CADO-NFS LOG

Dlog in Fp with 
p = 91109511933071554201802903795701989021612569628964539259899050592358431892241
y = 87493889800274222582900548667009991989700049304632627564050507246257017161987
g = 2636956959258946810191426492351640683005981563835384034375773230576168688790
p - 1 = 2**4 * 5 * 6359 * 78030424691 * 2295202126216837008978652626989273467723189905747503092156937
order_g = 2**2 * 5 * 6359 * 78030424691 * 2295202126216837008978652626989273467723189905747503092156937
mul_gp = 2**2 * 5 * 6359 * 78030424691
Subdlog with order 2295202126216837008978652626989273467723189905747503092156937 in Fp = 91109511933071554201802903795701989021612569628964539259899050592358431892241
g1 = 81344971784651093607577314604422933652934072674828789345616819048343361039697
y1 = 24655167518040949876050790864554469951460936890795378436378947746972293994439
Info:root: If you want to compute one or several new target(s), run cado-nfs.py /tmp/cado.htydj3b4/p75.parameters_snapshot.0 target=<target>[,<target>,...]
Info:root: logbase = 22167671836546850850740289172069462914257628875581352203716045668317468574172
Info:root: target = 81344971784651093607577314604422933652934072674828789345616819048343361039697
Info:root: log(target) = 378859981840906848820957511601953517466451927471469660249099 mod ell
378859981840906848820957511601953517466451927471469660249099
Info:root: logbase = 22167671836546850850740289172069462914257628875581352203716045668317468574172
Info:root: target = 24655167518040949876050790864554469951460936890795378436378947746972293994439
Info:root: log(target) = 1639226127474759620701601100250738069552656542550696361357216 mod ell
1639226127474759620701601100250738069552656542550696361357216
sage: dlog1 = pow(378859981840906848820957511601953517466451927471469660249099, -1, ell) * 16392261274747596207016011002
....: 50738069552656542550696361357216 % ell
sage: g1**dlog1 == y1
True
sage: dlog1
1018087564301874149192086802728835194265892285834616431559369
sage:

Dlog in Fq with 
q = 100748500420633602436909572573651942923829948109715215298913760623104145908957
y = 87563080820627806380850898731860520742983266799155542576092610861968329046365
g = 44344166210599691210046341463376129692509154685650638246452459454809589107882
q - 1 = 2**2 * 151 * 761 * 172264199 * 1272395036149799262058207121218496577799325253210771211721273551
order_g = 2**2 * 151 * 761 * 172264199 * 1272395036149799262058207121218496577799325253210771211721273551
mul_gq = 2**2 * 151 * 761 * 172264199
Subdlog with order 1272395036149799262058207121218496577799325253210771211721273551 in Fq = 100748500420633602436909572573651942923829948109715215298913760623104145908957
g2 = 30276072848139170007083404041300769699307841465505983042645514710610334966369
y2 = 45926341433646374742377904547321445206388188844141136065098557452004567800661
$ cado-nfs.py -dlp -ell 1272395036149799262058207121218496577799325253210771211721273551 target=30276072848139170007083404041300769699307841465505983042645514710610334966369 100748500420633602436909572573651942923829948109715215298913760623104145908957 -t 12
Info:Complete Factorization / Discrete logarithm: Total cpu/elapsed time for entire Discrete logarithm: 658.74/137.706
Info:root: CADO_DEBUG is on, data kept in /tmp/cado.5b74sbj8
Info:root: If you want to compute one or several new target(s), run cado-nfs.py /tmp/cado.5b74sbj8/p80.parameters_snapshot.0 target=<target>[,<target>,...]
Info:root: logbase = 85957352019927071818355242680681650991272249836607379548748536511737186451317
Info:root: target = 30276072848139170007083404041300769699307841465505983042645514710610334966369
Info:root: log(target) = 627742443601599637721620943837620376253619043926690819089673200 mod ell
627742443601599637721620943837620376253619043926690819089673200
Info:root: logbase = 85957352019927071818355242680681650991272249836607379548748536511737186451317
Info:root: target = 45926341433646374742377904547321445206388188844141136065098557452004567800661
Info:root: log(target) = 612201028157767105161030643594390845684422954246888494963653401 mod ell
612201028157767105161030643594390845684422954246888494963653401
sage: dlog2 = pow(627742443601599637721620943837620376253619043926690819089673200,-1, 1272395036149799262058207121218496
....: 577799325253210771211721273551) * 612201028157767105161030643594390845684422954246888494963653401 % 12723950361497
....: 99262058207121218496577799325253210771211721273551
sage: dlog2
548069444888831497111979414064448425013229068795261031300982647
"""



p = 91109511933071554201802903795701989021612569628964539259899050592358431892241
y = 87493889800274222582900548667009991989700049304632627564050507246257017161987
gp = 2636956959258946810191426492351640683005981563835384034375773230576168688790
# p - 1 = 2**4 * 5 * 6359 * 78030424691 * 2295202126216837008978652626989273467723189905747503092156937
order_gp = 2**2 * 5 * 6359 * 78030424691 * 2295202126216837008978652626989273467723189905747503092156937
mul_gp = 2**2 * 5 * 6359 * 78030424691
ellp = 2295202126216837008978652626989273467723189905747503092156937
Fp = GF(p)
gp = Fp(gp)
yp = Fp(y)
_dlog1 = discrete_log(yp ** ellp, gp ** ellp, ord=mul_gp)
dlog1 = 1018087564301874149192086802728835194265892285834616431559369
dlog_gp = crt([_dlog1, dlog1], [mul_gp, ellp])
print(f"Check dlog in Fp: {gp**dlog_gp == yp}")

q = 100748500420633602436909572573651942923829948109715215298913760623104145908957
y = 87563080820627806380850898731860520742983266799155542576092610861968329046365
gq = 44344166210599691210046341463376129692509154685650638246452459454809589107882
# q - 1 = 2**2 * 151 * 761 * 172264199 * 1272395036149799262058207121218496577799325253210771211721273551
order_gq = 2**2 * 151 * 761 * 172264199 * 1272395036149799262058207121218496577799325253210771211721273551
mul_gq = 2**2 * 151 * 761 * 172264199
ellq = 1272395036149799262058207121218496577799325253210771211721273551
Fq = GF(q)
gq = Fq(gq)
yq = Fq(y)
_dlog2 = discrete_log(yq ** ellq, gq ** ellq, ord=mul_gq)
dlog2 = 548069444888831497111979414064448425013229068795261031300982647
dlog_gq = crt([_dlog2, dlog2], [mul_gq, ellq])
print(f"Check dlog in Fq: {gq**dlog_gq == yq}")

mod = lcm(order_gp, order_gq)
dlog = crt([int(dlog_gp), int(dlog_gq)], [order_gp, order_gq])
print(f"{mod = }, {int(mod).bit_length() = }")
print(f"{dlog = }")

# 77 * 8 = 616
# x(2**(616 * 0) + 2**(616 * 1) + 2**(616 * 2) + 2**(616 * 3) + ... + 2**(616 * 776)) = 777 * secret
dlog_s = pow(sum([2**(616 * i) for i in range(777)]), -1, mod) * int(dlog) % mod
print(f"{dlog_s = }")
ascii_letters_middle = (65 + 122) // 2
mat = matrix(ZZ, 79, 79)

# local debug
# from random import choice
# import string
# secret = "".join([choice(string.ascii_letters) for _ in range(77)])
# real = int.from_bytes(secret.encode(), 'big')
# dlog_s = real % mod
# print(secret)


for i in range(77):
    mat[i, 0] = 2**(i * 8)
    mat[i, i + 1] = 1
mat[77] = [-dlog_s] + [-ascii_letters_middle] * 77 + [1]
mat[78, 0] = mod

mat.rescale_col(0, 2*512)
# target = vector(ZZ, [0] + [ascii_letters_middle] * 78)
# sol = IntegerLattice(mat).approximate_closest_vector(target)
# print(f"Solution vector: {sol}")
L = mat.BKZ(block_size = 36)
for row in L:
    if row[-1] == 1:
        print(f"Found possible solution row: {row}")
        solution = [num + ascii_letters_middle for num in row[1:-1]]
        if all(65 <= num <= 122 for num in solution):
            print(f"Valid solution found! {bytes(solution)[::-1]}")
        
# pAtAstbcpQrhuDJQnZGrGgPRIXIrOQIuoXdJonKWvwQCvGwDppCrWzyhZEzwhuIJANyYzvzXuouOK