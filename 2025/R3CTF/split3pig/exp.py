from sage.all import var, crt, GF, Zmod, lcm, PolynomialRing, ZZ
from hashlib import sha256

N = 39857078746406469131129281921490520306196739933449401384580614683236877901453146754149222509812535866333862501431453065249306959004319408436548574942416212329735258587670686655658056553446879680643872518009328886406310298097685861873954727153720761248262606469217940464611561028443119183464419610396387619860313813067179519809796028310723320608528262638653826016645983671026819244220510314301178181698134390850683834304169240632402535087021483298892547974104858755498823118164815682452718215716370727477136888839954993949013970026988378086175471190518276414200966496353144747778470590767485019943178534397845127421058830430797806265311195099187747227867325234593386438995618936934586514932401108874934000734850169069717060963988677462779177959990601405850727404268354600078746523164279

E1 = 17599828213549223253832044274649684283770977196846184512551517947600728059
E2 = 13524024408490227176018717697716068955892095093578246398907145843636542721
e1_bit = E1.bit_length()
e2_bit = E2.bit_length()
E = lcm(E1, E2)
# p - 1 = k1 * E1
# q - 1 = k2 * E2
# N % E1 = q^2 % E1
# N % E2 = p % E2 
rp = crt([1, N % E2], [E1, E2])
rqe1_square = N % E1
rqe1s = Zmod(E1)(rqe1_square).nth_root(2, all=True)
print(f"{rqe1s = }")
qbit = 870
K = 2**(qbit - e1_bit - e2_bit)

for rqe1 in rqe1s:
    rq = crt([int(rqe1), 1], [E1, E2])
    # p - rp = k1 * E1E2 
    # q - rq = k2 * E1E2 
    R = PolynomialRing(Zmod(N), "x")
    x = R.gen()
    f = (x * E1*E2 + ZZ(rq))**2
    roots = f.monic().small_roots(X= K, epsilon = 0.05, beta = 2/3 - 0.1)
    if len(roots) >= 1:
        print(f"{roots = }")
        k = roots[0]
        q = int(rq) + k * E1 * E2
        H = sha256()
        H.update(str(q).encode())
        print("r3ctf{" + H.hexdigest() + "}")