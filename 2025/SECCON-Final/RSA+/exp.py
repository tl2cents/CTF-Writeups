from Crypto.Util.number import getPrime, inverse, GCD, isPrime
from secrets import randbelow
from sage.all import GF, PolynomialRing, ZZ
from pwn import remote, process
from binascii import hexlify

local = True
if local:
    io = process(["python3", "server.py"])
else:
    io = remote("xxxx", 0000)

def gen_primes():
    while True:
        p = getPrime(600)
        if (p - 1) % 5 == 0:
            continue
        q = (p - 1) + 5
        while not isPrime(q):
            q += (p - 1)
        n = p * q
        g = n // 2
        h = n // 3
        print(f"{n % 3 = }")
        if n % 3 == 1:
            continue
        assert g % (p - 1) == 2 * h % (p - 1), f"check failed {g % (p - 1) = } {2 * h % (p - 1) = }"
        if GCD(h, p - 1) == 1:
            return p, q, n, g, h
    
p = 4129284477590436975462058159058751496879426225711950616980857659361882287013015292465345440422805246254285575567450139982507288890140003006065321543054455848218275927631925064815949
q = 202334939401931411797640849793878823347091885059885580232062025308732232063637749330801926580717457066459993202805056859142857155616860147297200755609668336562695520453964328175981457
n = 835498524546597072205468227827551320095259169463425461421252753303849037443904202362979781960871385411757105437115885901675398396323561024831817748064041886740682059237056708981535833538740924495001897639935652615615405058988267951981122905894748005264313472657846444947603925230706964138489599835526957209087872258057239049146215356134672016701464088402141857693
g = 417749262273298536102734113913775660047629584731712730710626376651924518721952101181489890980435692705878552718557942950837699198161780512415908874032020943370341029618528354490767916769370462247500948819967826307807702529494133975990561452947374002632156736328923222473801962615353482069244799917763478604543936129028619524573107678067336008350732044201070928846
h = 278499508182199024068489409275850440031753056487808487140417584434616345814634734120993260653623795137252368479038628633891799465441187008277272582688013962246894019745685569660511944512913641498333965879978550871871801686329422650660374301964916001754771157552615481649201308410235654712829866611842319069695957419352413016382071785378224005567154696134047285897


io.sendlineafter(b"> ", hex(p).encode())
io.sendlineafter(b"> ", hex(q).encode()) 
r = int(io.recvline().split(b" = ")[1])
pr = PolynomialRing(GF(p), 'x')
v = pr.gen()
fx =  v + v**2 - r
rs = fx.roots()
dh = inverse(h, p - 1)
xs = [pow(r[0], dh, p) for r in rs]
rx = None
for xi in xs:
    if int(xi).bit_length() <= 512:
        rx = xi
        break
assert rx is not None
io.sendlineafter(b"> ", str(rx).encode())
io.interactive()
